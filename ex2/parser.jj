//パーザ定義
PARSER_BEGIN (Parser)
import java.io.*;

public class Parser {
    //記号表用疑似構造体
	public static class s_table{
	    public String  var;
	    public int    address;
	    public int    value;
    }
    public static int count=0;
    public static int pc=1;
    public static int op_type=0;

	//抽象機械命令
	public static int push     = 1;
	public static int load     = 2;
	public static int store    = 3;
	public static int jpc      = 4;
	public static int jmp      = 5;
	public static int op       = 6;
	public static int label    = 7;
    //rjmp=8,restore=9
    public static int par      = 10;
	public static int nop      = 0;

	public static void main(String args[]){
        long startTime = System.currentTimeMillis();
	    s_table[] arr_table = new s_table[50];
		for(int i=0;i < 50; i++){
			arr_table[i] = new s_table();
		}
		try {			
			Parser parser = new Parser(new FileReader(args[0]));
            FileWriter table = new FileWriter("table.txt");
            FileWriter code = new FileWriter("code.txt");
			parser.Program(arr_table);
            for(int j=0;j<count;j++){
				table.write(""+String.format("%10s",arr_table[j].var)+" "+String.format("%2d",arr_table[j].address)+" "+String.format("%5d",arr_table[j].value)+"\n");
			}
			table.close();
            code.close();
		}catch(Exception ex){
			ex.printStackTrace();
			System.err.println("Failed parse:"+ex.getMessage());
		}
        long endTime = System.currentTimeMillis();
        System.out.println("elapsed_time: "+ (endTime - startTime)/1000.0 + " [sec]");
	}
}
PARSER_END (Parser)

//字句定義
SKIP: {
	    <SPACE: " " | "\t" | "\r" | "\n" >
}

TOKEN: {
	<PAR: "par">
	|<NUMBER: ["0"-"9"] | ["1"-"9"](["0"-"9"])*>
	|<WHILE: "while">
	|<DO: "do">
	|<END: "end">
	|<PLUS: "+">
	|<MINUS: "-">
	|<MULT: "*">
	|<EQ: "=">
	|<NEQ: "<>">
	|<LT: "<">
	|<LE: "<=">
	|<GT: ">">
	|<GE: ">=">
	|<LPAREN: "(">
	|<RPAREN: ")">
	|<LBRACKET: "[">
	|<RBRACKET: "]">
	|<LBRACE: "{">
	|<RBRACE: "}">
	|<COMMA: ",">
	|<SEMICOLON: ";">
	|<COLON: ":">
	|<PERIOD: ".">
	|<ASSIGN: ":=">
	|<AND: "&&">
	|<VAR: "var">
	|<IF: "if">
	|<THEN: "then">
	|<ELSE: "else">
    |<NOP: "nop">
	|<VARIABLE: (["a"-"z"] | ["A"-"Z"])(["0"-"9"] | ["a"-"z"] | ["A"-"Z"])*>
}

void Program(s_table[] arr_table): {
} {
    Statement(arr_table)Program2(arr_table)
    |Program2(arr_table)
}

void Program2(s_table[] arr_table): {
} {
    <SEMICOLON>Program(arr_table)Program2(arr_table)
    |<PAR>
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.par));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    <LBRACE>Program(arr_table)<RBRACE>
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.par));
        code.write("    1\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    (
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.par));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }

    }
    <LBRACE>Program(arr_table)<RBRACE>
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.par));
        code.write("    1\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    )+
    |{}
}

void Statement(s_table[] arr_table): {Token token1; Token token2;int jlabel=0;int jlabel2=0;
} {
    token1=<VARIABLE> <EQ> Expression(arr_table)
    {try{
        int type1=0;
		int address1=0;
		FileWriter code = new FileWriter("code.txt",true);
        for(int i=0;i<Parser.count;i++){
			if(arr_table[i].var.equals(token1.image)){
				address1=arr_table[i].address;
				break;
			}
		}
		code.write(String.format("%2d ",Parser.store));
		code.write(String.format("%5d\n",address1));
		code.close();
        ++Parser.pc;
    }catch(IOException e){
        System.err.println("err");
    }
    }
    |<IF> B(arr_table) <THEN> 
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jpc));
        code.write(String.format("%5d\n",Parser.pc+2));
        ++Parser.pc;
        jlabel=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\n");
        ++Parser.pc;
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }

    }
    Program(arr_table) 
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        jlabel2=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
        RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc);
        raf.write(s.getBytes());
        raf.close();
        FileWriter code2 = new FileWriter("code.txt",true);
        code2.write(String.format("%2d ",Parser.label));
        code2.write("    0\n");
        ++Parser.pc;
        code2.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    <ELSE> Program(arr_table) 
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
		RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel2-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc-1);
        raf.write(s.getBytes());
        raf.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    <END>
    |<WHILE> 
    {try{
        jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
	}catch(IOException e){
		System.err.println("err");
	}
    }
    B(arr_table) 
    {try{
		FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jpc));
        code.write(String.format("%5d\n",Parser.pc+2));
        ++Parser.pc;
        jlabel=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\n");
        ++Parser.pc;
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    <DO> Program(arr_table) <END>
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jmp));
        code.write(String.format("%5d\n",jlabel2));
        ++Parser.pc;
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
        RandomAccessFile raf2 = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf2.read();
        }
        String s2 = String.format("%5d",Parser.pc-1);
        raf2.write(s2.getBytes());
        raf2.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    |<VAR> token1=<VARIABLE>
    {try{
        arr_table[Parser.count].var = token1.image;
        arr_table[Parser.count].value = 0;
        arr_table[Parser.count].address = Parser.count;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.push));
        code.write("    0\n");
        ++Parser.pc;
        code.close();
		++Parser.count;
    }catch(IOException e){
        System.err.println("err");
    }
    }
    |<NOP>
}

void Op(s_table[] arr_table): {
} {
    <PLUS>{Parser.op_type=0;}
    |<MULT>{Parser.op_type=1;}
    |<MINUS>{Parser.op_type=2;}
}

void f0(s_table[] arr_table): {Token token;
} {
    token=<NUMBER>
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.push));
        code.write(String.format("%5s\n",token.image));
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    |token=<VARIABLE>
    {try{
        int address1 = 0;
		FileWriter code = new FileWriter("code.txt",true);
		for(int i=0;i<50;i++){
			if(arr_table[i].var.equals(token.image)){
				address1=arr_table[i].address;
				break;
			}
		}
        code.write(String.format("%2d ",Parser.load));
        code.write(String.format("%5d\n",address1));
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
    }
    |<LPAREN> Expression(arr_table) <RPAREN>
}

void Expression(s_table[] arr_table): {
} {
    f0(arr_table) (Op(arr_table) f0(arr_table)
    {try{
		FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.op));
        code.write(String.format("%5d\n",Parser.op_type));
        ++Parser.pc;
        code.close();
	 }
	 catch(IOException e){
		System.err.println("err");
	 }
	}
    )*
}

void B(s_table[] arr_table): {
} {
    B2(arr_table) (<AND> B2(arr_table))*
}

void f1(s_table[] arr_table): {
} {
    <GT> Expression(arr_table)
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.op));
        code.write("    3\n");
        ++Parser.pc;
        code.close();
	}
	 catch(IOException e){
		 System.err.println("err");
	 }

	}
    |<EQ> <EQ> Expression(arr_table)
    {try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.op));
        code.write("    4\n");
        ++Parser.pc;
        code.close();
	}
	 catch(IOException e){
		 System.err.println("err");
	 }

	}
}

void B2(s_table[] arr_table): {
} {
    <LPAREN> Expression(arr_table) (f1(arr_table))* <RPAREN>
}